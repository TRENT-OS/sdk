#-------------------------------------------------------------------------------
#
# Copyright (C) 2020, Hensoldt Cyber GmbH
#
#-------------------------------------------------------------------------------


# the name is fixed, but the tag can be set externally also

TRENTOS_BUILD_CONTAINER_NAME="trentos_build"
TRENTOS_BUILD_CONTAINER_TAG=${TRENTOS_BUILD_CONTAINER_TAG:-20200715}
TRENTOS_BUILD_CONTAINER=${TRENTOS_BUILD_CONTAINER_NAME}:${TRENTOS_BUILD_CONTAINER_TAG}

TRENTOS_TEST_CONTAINER_NAME="trentos_test"
TRENTOS_TEST_CONTAINER_TAG=${TRENTOS_TEST_CONTAINER_TAG:-20200715}
TRENTOS_TEST_CONTAINER=${TRENTOS_TEST_CONTAINER_NAME}:${TRENTOS_TEST_CONTAINER_TAG}

DOCKER_COMMON_ARGS=(
        # --interactive Keep STDIN open even if not attached
        -i
        # discard changes to container on exit
        --rm
        # set the uid and gid of the user running in the container to that of
        # the user on the host
        -u $(id -u):$(id -g)
        # mount the current working directory on the host in the container
        # in the /host folder
        -v $(pwd):/host
        # mount /etc/localtime to the container as read only, so that the
        # container has a valid clock source
        -v /etc/localtime:/etc/localtime:ro
        # set the current directory in the container to /host
        -w /host
    )


TTY=-t
DOCKER_ARGS=()
ARGS=()

#-------------------------------------------------------------------------------
# Parse the flags passed as command line arguments to the open_trentos scripts
parse_command_line_arguments()
{
    while getopts ":d:hn" opt; do
      case ${opt} in
        n )
          TTY=""
          ;;
        h )
            echo -e "Usage:\n`basename $0` [-h][-n][-d param] command"
            echo -e "      -d param  passes param to the parameter list of docker run."
            echo -e "                Has to be a valid docker run parameter."
            echo -e "      -h        print help and exit"
            echo -e "      -n        don't allocate a TTY for docker run"
            exit 0
          ;;
        d )
          DOCKER_ARGS+=( ${OPTARG} )
          ;;
        \? )
          echo "Invalid option: ${OPTARG} " 1>&2
          exit 1
          ;;
        : )
          echo "Invalid option: ${OPTARG}  requires an argument" 1>&2
          exit 1
          ;;
      esac
    done

    shift $((OPTIND -1))


    if [ "${#}" -eq "0" ]; then
        ARGS=(bash)
    else
        ARGS=("$@")
    fi

}

#-------------------------------------------------------------------------------
# avoid having unsupported chars in hostname
make_container_hostname()
{
    local tmp=${1}
    tmp=${tmp//_/-}  # replace "_" by "-"
    tmp=${tmp//:/-}  # replace ":" by "-"
    tmp=${tmp//./-}  # replace "." by "-"
    echo "${tmp}"
}


#-------------------------------------------------------------------------------
open_trentos_build_env()
{
    parse_command_line_arguments "$@"

    DOCKER_PARAMS=(
        ${DOCKER_COMMON_ARGS[@]}
        # --tty Allocate a pseudo-TTY
        ${TTY}
        # add the runtime GID used for the haskell tools
        --group-add=stack
        # host name is container name with tag
        --hostname $(make_container_hostname ${TRENTOS_BUILD_CONTAINER})
        # parameters passed on the command line
        ${DOCKER_ARGS[@]}
    )
    docker run ${DOCKER_PARAMS[@]} ${TRENTOS_BUILD_CONTAINER} ${ARGS[@]}
}


#-------------------------------------------------------------------------------
open_trentos_test_env()
{
    parse_command_line_arguments "$@"

    local DOCKER_PARAMS=(
        ${DOCKER_COMMON_ARGS[@]}
        # --tty Allocate a pseudo-TTY
        ${TTY}
        # host name is container name with tag
        --hostname $(make_container_hostname ${TRENTOS_TEST_CONTAINER})
        # make the container run in a separate network namespace
        --network=bridge
        # allow the container to manage its interfaces
        # needed to create TAP devices
        --cap-add=NET_ADMIN
        # allow the container to send/receive RAW packets
        # needed by tcpdump
        --cap-add=NET_RAW
        # filedevice needed to create TAP devices
        --device=/dev/net/tun
        # parameters passed on the command line
        ${DOCKER_ARGS[@]}
    )
    docker run ${DOCKER_PARAMS[@]} ${TRENTOS_TEST_CONTAINER} ${ARGS[@]}
}
