#-------------------------------------------------------------------------------
# Copyright (C) 2020-2024, HENSOLDT Cyber GmbH
# 
# SPDX-License-Identifier: GPL-2.0-or-later
#
# For commercial licensing, contact: info.cyber@hensoldt.net
#-------------------------------------------------------------------------------


# the name is fixed, but the tag can be set externally also

TRENTOS_BUILD_CONTAINER_NAME="trentos_build"
TRENTOS_BUILD_CONTAINER_TAG=${TRENTOS_BUILD_CONTAINER_TAG:-20231206}
TRENTOS_BUILD_CONTAINER=${TRENTOS_BUILD_CONTAINER_NAME}:${TRENTOS_BUILD_CONTAINER_TAG}

TRENTOS_TEST_CONTAINER_NAME="trentos_test"
TRENTOS_TEST_CONTAINER_TAG=${TRENTOS_TEST_CONTAINER_TAG:-20231206}
TRENTOS_TEST_CONTAINER=${TRENTOS_TEST_CONTAINER_NAME}:${TRENTOS_TEST_CONTAINER_TAG}


DOCKER_ARGS=()
ARGS=()

# default to allocating a pseudo-TTY when starting a docker container
TTY=-t


#-------------------------------------------------------------------------------
# Parse parameters to set DOCKER_ARGS and ARGS
parse_command_line_arguments()
{
    while getopts ":d:hn" opt; do
      case ${opt} in
        n )
          TTY=""
          ;;
        h )
            echo -e "Usage:\n`basename $0` [-h][-n][-d param] command"
            echo -e "      -d param  passes param to the parameter list of docker run."
            echo -e "                Has to be a valid docker run parameter."
            echo -e "      -h        print help and exit"
            echo -e "      -n        don't allocate a TTY for docker run"
            exit 0
          ;;
        d )
          DOCKER_ARGS+=( ${OPTARG} )
          ;;
        \? )
          echo "Invalid option: ${OPTARG}" 1>&2
          exit 1
          ;;
        : )
          echo "Invalid option: ${OPTARG} requires an argument" 1>&2
          exit 1
          ;;
      esac
    done

    shift $((OPTIND -1))


    if [ "${#}" -eq "0" ]; then
        ARGS=(bash)
    else
        ARGS=("$@")
    fi

}


#-------------------------------------------------------------------------------
# params: <container> [<docker param1> [<docker param2> ...]]
do_run_docker()
{
    local CONTAINER=$1
    shift

    # hostname in container is the container name with tag
    local DOCKER_HOSTNAME=${CONTAINER}
    # avoid having unsupported chars in hostname
    DOCKER_HOSTNAME=${DOCKER_HOSTNAME//_/-}  # replace "_" by "-"
    DOCKER_HOSTNAME=${DOCKER_HOSTNAME//:/-}  # replace ":" by "-"
    DOCKER_HOSTNAME=${DOCKER_HOSTNAME//./-}  # replace "." by "-"

    local DOCKER_PARAMS=(
        # --interactive: keep STDIN open even if not attached
        -i
        # tty setting
        ${TTY}
        # discard any changes on container exit
        --rm
        # set host name is container
        --hostname ${DOCKER_HOSTNAME}
        # set UID/GID of user in container to user on the host
        -u $(id -u):$(id -g)
        # mount /etc/localtime in container as read only, so clock is valid
        -v /etc/localtime:/etc/localtime:ro
        # mount current working directory on host in container as /host
        -v $(pwd):/host
        # set the current directory in the container to /host
        -w /host
        # caller's docker params
        $@
        # docker parameters passed on the command line
        ${DOCKER_ARGS[@]}
    )

    # the --network docker argument can only exists once. 
    # If the user specifies its own, the default should be overwritten
    NETWORK_PARAMS=()
    # find each occurrence of the network param
    for i in "${!DOCKER_PARAMS[@]}"; do
        if [[ "${DOCKER_PARAMS[i]}" == "--network="* ]]; then
            NETWORK_PARAMS+=("$i")
        fi
    done

    # remove the first default network argument
    if [ ${#NETWORK_PARAMS[@]} -gt 1 ]; then
        unset 'DOCKER_PARAMS[${NETWORK_PARAMS[0]}]'
    fi

    (
        set -x
        docker run "${DOCKER_PARAMS[@]}" ${CONTAINER} "${ARGS[@]}"
    )
}


#-------------------------------------------------------------------------------
open_trentos_build_env()
{
    # set DOCKER_ARGS and ARGS
    parse_command_line_arguments "$@"

    local DOCKER_PARAMS_BUILD=(
        # add the runtime GID used for the haskell tools
        --group-add=stack
    )

    do_run_docker ${TRENTOS_BUILD_CONTAINER} "${DOCKER_PARAMS_BUILD[@]}"
}


#-------------------------------------------------------------------------------
open_trentos_test_env()
{
    # set DOCKER_ARGS and ARGS
    parse_command_line_arguments "$@"

    local DOCKER_PARAMS_TEST=(
        # allow sudo
        --group-add=sudo
        # allow access to tty devices (USB/UART adapters)
        --group-add=dialout
        # make the container run in a separate network namespace
        --network=bridge
        # allow the container to manage its interfaces, needed for TAP creation
        --cap-add=NET_ADMIN
        # allow the container to send/receive RAW packets, needed by tcpdump
        --cap-add=NET_RAW
        # Using "--privileged" gives access to all host devices. In case this is
        # too powerful, "--device=</dev/...>[:/dev/...[:rwm]]" can be used to
        # give access to specific devices. Where r=read, w=write, m=mknod. If
        # nothing is given, "rwm" is default.
        # Mapping via "-v /dev/bus/usb:/dev/bus/usb" is a rather crude way to
        # allow device access also.
        # For example:
        #  --device=/dev/net/tun (allow creating TUN/TAP devices)
        #  --device=/dev/ttyUSB0
        -v /dev/bus/usb:/dev/bus/usb # (general USB access)
        #
        --privileged

    )

    do_run_docker ${TRENTOS_TEST_CONTAINER} "${DOCKER_PARAMS_TEST[@]}"
}
