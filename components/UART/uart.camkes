/*
 *  UART
 *
 *  Copyright (C) 2020, Hensoldt Cyber GmbH
 */


// ToDo: remove this hard-coded ChanMux dependency
import <seos_if_chanMux.camkes>;


//------------------------------------------------------------------------------
// RPC Interface

procedure UartInf {

    // writes synchronously len bytes from the input dataport to the uart
    void write(size_t len);

};


//------------------------------------------------------------------------------
// Components

#define DECLARE_COMPONENT_UART_HW(_type_hw_) \
    \
    component uart_ ## _type_hw_ { \
        hardware; \
        \
        dataport  Buf  regBase; \
        emits     IRQ  irq; \
    }


#define DECLARE_COMPONENT_UART_DRV(_type_drv_) \
    \
    component _type_drv_ { \
        control; \
        \
        dataport  Buf               regBase; \
        consumes  IRQ               irq; \
        has       binary_semaphore  sem; \
        \
        provides  UartInf           UartDrv; \
        dataport  Buf               inputDataPort; \
        \
        uses      ChanMuxOutInf     Output; \
    }


//------------------------------------------------------------------------------
// Instance Connection

#define DECLARE_AND_CONNECT_INSTANCE_UART_DRV_HW( \
    _type_hw_, \
    _inst_hw_, \
    _type_drv_, \
    _inst_drv_) \
    \
    component   uart_ ## _type_hw_   _inst_hw_; \
    component   _type_drv_           _inst_drv_; \
    \
    connection  seL4HardwareMMIO       _inst_drv_ ## _inst_hw_ ## _mmio( \
                from _inst_drv_.regBase, \
                to   _inst_hw_.regBase); \
    \
    connection  seL4HardwareInterrupt  _inst_drv_ ## _inst_hw_ ## _irq( \
                from _inst_hw_.irq, \
                to   _inst_drv_.irq);


//------------------------------------------------------------------------------
// Instance Configuration


#define CONFIGURE_INSTANCE_UART_HW( \
            _inst_hw_, \
            _inst_, \
            _phys_addr_, \
            _irq_) \
    \
    _inst_hw_.regBase_paddr  = _phys_addr_; \
    _inst_hw_.regBase_size   = 0x1000; \
    _inst_hw_.irq_irq_number = _irq_; \
    \
    __inst_.inputDataPort    = "R";


//------------------------------------------------------------------------------
// convenience macros, since UART = Driver + HW

#define DECLARE_COMPONENT_UART(_type_) \
            DECLARE_COMPONENT_UART_HW(_type_ ## _hw) \
            DECLARE_COMPONENT_UART_DRV(_type_)


#define DECLARE_AND_CONNECT_INSTANCE_UART(_type_, _inst_) \
    DECLARE_AND_CONNECT_INSTANCE_UART_DRV_HW( \
        _type_ ## _hw, \
        _inst_ ## _hw, \
        _type_, \
        _inst_)


#define CONFIGURE_INSTANCE_UART(_inst_, _phys_addr_, _irq_) \
    CONFIGURE_INSTANCE_UART_HW(_inst_ ## _hw, _inst_, _phys_addr_, _irq_)
