/*
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

/*
 *  NIC-Chanmux CAmkES Component
 *
 *  to be used as:
 *
 *      #include "NIC_ChanMux/NIC_ChanMux.camkes"
 *
 *      NIC_ChanMux_COMPONENT_DECLARE(NIC_Chanmux_Driver_1, 16384)
 *      NIC_ChanMux_COMPONENT_DECLARE(NIC_Chanmux_Driver_2, 16384)
 *
 */

#pragma once

import <if_ChanMux.camkes>;
import <if_OS_Logger.camkes>;
import <if_OS_Nic.camkes>;

#include "ChanMux/ChanMuxHelper.camkes"



//------------------------------------------------------------------------------

#define NIC_ChanMux_COMPONENT_DECLARE( \
    _name_, \
    _ringbuffer_size_) \
    \
    component _name_ { \
        control; \
        \
        has              mutex               mutex_ctrl_channel; \
        \
        /* lower interface to ChanMux ------------------------------------- */ \
        ChanMux_CLIENT_DECLARE_INTERFACE(chanMux) \
        ChanMux_CLIENT_DECLARE_CHANNEL_CONNECTOR(chanMux, ctrl) \
        ChanMux_CLIENT_DECLARE_CHANNEL_CONNECTOR(chanMux, data) \
        \
        /* upper interface as NIC Driver ---------------------------------- */ \
        provides         if_OS_Nic           nic_rpc; \
        emits            EventDataAvailable  nic_event_hasData; \
        dataport         Buf(_ringbuffer_size_) nic_port_to; /* driver -> network stack */  \
        dataport         Buf                    nic_port_from; /* network stack -> driver */ \
        \
        /* usage of LogServer is optional ----------------------------------*/ \
        maybe uses      if_OS_Logger        logServer_rpc; \
        maybe dataport  Buf                 logServer_port; \
        maybe consumes  EventReady          logServer_event_ready; \
    }


//------------------------------------------------------------------------------


/*
 * Assign client interface:
 *
 *      NIC_ChanMux_INSTANCE_CONNECT_CLIENT(
 *          <instance>,
 *          <nic>.<rpc>, <nic>.<port_to>, <nic>.<port_from>, <nic>.<evt>,
 *      )
 */
#define NIC_ChanMux_INSTANCE_CONNECT_CLIENT( \
    _inst_, \
    _nic_rpc_, \
    _nic_dp_to_, \
    _nic_dp_from_, \
    _nic_ev_) \
    \
    connection seL4NotificationNative  \
        _inst_ ## _nic_ev( \
            from    _inst_.nic_event_hasData,\
            to      _nic_ev_); \
    connection seL4RPCCall \
        _inst_ ## _nic_rpc( \
            from    _nic_rpc_, \
            to      _inst_.nic_rpc); \
    connection seL4SharedData \
        _inst_ ## _nic_dp_from ( \
            from    _inst_.nic_port_to, \
            to      _nic_dp_from_); \
    connection seL4SharedData \
        _inst_ ## _nic_dp_to( \
            from    _inst_.nic_port_from, \
            to      _nic_dp_to_);


/*
 * Assign the optional logger:
 *
 *      NIC_ChanMux_INSTANCE_CONNECT_OPTIONAL_LOGGER(
 *          <instance>,
 *          <logger>.<rpc>, <logger>.<port_to>
 *      )
 */
#define NIC_ChanMux_INSTANCE_CONNECT_OPTIONAL_LOGGER( \
    _inst_, \
    _rpc_, \
    _port_) \
    \
    connection seL4RPCCall \
        _inst_ ## _logger_rpc( \
            from    _inst_.logServer_rpc, \
            to      _rpc_ \
        ); \
    connection seL4SharedData \
        _inst_ ## _logger_port( \
            from    _inst_.logServer_port, \
            to      _port_ \
        );
