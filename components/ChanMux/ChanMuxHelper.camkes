/*
 *  ChanMux helper macros
 *
 *  Copyright (C) 2020, Hensoldt Cyber GmbH
 *
 */

#pragma once


//==============================================================================
//
// 0 fixed params, 2 variable params
//
//==============================================================================

#define HELPER_FOR_EACH_nFP_nVP_GET_MACRO(_nfp_, _nvp_, _name_) \
            HELPER_FOR_EACH_ ## _nfp_ ## FP_ ## _nvp_ ## VP_ ##  _name_

// all _dxpy_ and the variable args are thrown away
#define HELPER2_FOR_EACH_nFP_2VP_GET_MACRO( \
            _nfp_, \
            _d0p0_, _d0p1_, \
            _d1p0_, _d1p1_, \
            _d2p0_, _d2p1_, \
            _d3p0_, _d3p1_, \
            _d4p0_, _d4p1_, \
            _d5p0_, _d5p1_, \
            _d6p0_, _d6p1_, \
            _d7p0_, _d7p1_, \
            _name_, \
            ... \
        ) \
            HELPER_FOR_EACH_nFP_nVP_GET_MACRO(_nfp_, 2, _name_)

#define HELPER_FOR_EACH_nFP_2VP_GET_MACRO(_nfp_, ...) \
            HELPER2_FOR_EACH_nFP_2VP_GET_MACRO( \
                _nfp_, \
                __VA_ARGS__, \
                8,8x,7,7x,6,6x,5,5x,4,4x,3,3x,2,2x,1,1x)


#define HELPER_FOR_EACH_0FP_2VP_1(_macro_,_vp0_,_vp1_) \
            _macro_(_vp0_,_vp1_)

#define HELPER_FOR_EACH_0FP_2VP_2(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_1(_macro_,__VA_ARGS__)

#define HELPER_FOR_EACH_0FP_2VP_3(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_2(_macro_,__VA_ARGS__)

#define HELPER_FOR_EACH_0FP_2VP_4(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_3(_macro_,__VA_ARGS__)

#define HELPER_FOR_EACH_0FP_2VP_5(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_4(_macro_,__VA_ARGS__)

#define HELPER_FOR_EACH_0FP_2VP_6(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_5(_macro_,__VA_ARGS__)

#define HELPER_FOR_EACH_0FP_2VP_7(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_6(_macro_,__VA_ARGS__)

#define HELPER_FOR_EACH_0FP_2VP_8(_macro_,_vp0_,_vp1_, ...) \
            _macro_(_vp0_,_vp1_) \
            HELPER_FOR_EACH_0FP_2VP_7(_macro_,__VA_ARGS__)

//------------------------------------------------------------------------------
#define FOR_EACH_0FP_2VP(_macro_,...) \
            HELPER_FOR_EACH_nFP_2VP_GET_MACRO(0, __VA_ARGS__)(\
                _macro_,__VA_ARGS__ \
            )


//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================


//------------------------------------------------------------------------------
#define FOR_EACH_PARAM_DROP_FIRST(_p0_, ...)        __VA_ARGS__

#define FOR_EACH_PARAM_DROP_0(...)                  __VA_ARGS__

#define FOR_EACH_PARAM_DROP_1(...) \
            FOR_EACH_PARAM_DROP_FIRST(__VA_ARGS__)

#define FOR_EACH_PARAM_DROP_2(...) \
            FOR_EACH_PARAM_DROP_1(FOR_EACH_PARAM_DROP_FIRST(__VA_ARGS__) )

#define FOR_EACH_PARAM_DROP_3(...) \
            FOR_EACH_PARAM_DROP_2(FOR_EACH_PARAM_DROP_FIRST(__VA_ARGS__) )

#define FOR_EACH_PARAM_DROP_4(...) \
            FOR_EACH_PARAM_DROP_3(FOR_EACH_PARAM_DROP_FIRST(__VA_ARGS__) )

#define FOR_EACH_PARAM_DROP_8(...) \
            FOR_EACH_PARAM_DROP_4(FOR_EACH_PARAM_DROP_4(__VA_ARGS__) )

#define FOR_EACH_PARAM_DROP_16(...) \
            FOR_EACH_PARAM_DROP_8( FOR_EACH_PARAM_DROP_8(__VA_ARGS__) )


// we can't use this macro above, because the preprocessor will not resolve the
// recursion then
#define FOR_EACH_PARAM_DROP(_n_, ...) \
            FOR_EACH_PARAM_DROP_ ## _n_(__VA_ARGS__)


//------------------------------------------------------------------------------
#define FOR_EACH_PARAM_EXTRACT_FIRST(_p0_, ...)      _p0_

#define FOR_EACH_PARAM_EXTRACT_1(...) \
            FOR_EACH_PARAM_EXTRACT_FIRST(__VA_ARGS__)

#define FOR_EACH_PARAM_EXTRACT_2(...) \
            FOR_EACH_PARAM_EXTRACT_FIRST(__VA_ARGS__), \
            FOR_EACH_PARAM_EXTRACT_1( FOR_EACH_PARAM_DROP(1, __VA_ARGS__))

#define FOR_EACH_PARAM_EXTRACT_3(...) \
            FOR_EACH_PARAM_EXTRACT_FIRST(__VA_ARGS__), \
            FOR_EACH_PARAM_EXTRACT_2( FOR_EACH_PARAM_DROP(1, __VA_ARGS__))

#define FOR_EACH_PARAM_EXTRACT_4(...) \
            FOR_EACH_PARAM_EXTRACT_FIRST(__VA_ARGS__), \
            FOR_EACH_PARAM_EXTRACT_3( FOR_EACH_PARAM_DROP(1, __VA_ARGS__))

// we can't use this macro above, because the preprocessor will not resolve the
// recursion then
#define FOR_EACH_PARAM_EXTRACT(_n_,...) \
            FOR_EACH_PARAM_EXTRACT_ ## _n_(__VA_ARGS__)


//------------------------------------------------------------------------------

#define GET_MULTIPLE_PARAMS_AT_IDX(_idx_,_cnt_, ...) \
            FOR_EACH_PARAM_EXTRACT(_cnt_, FOR_EACH_PARAM_DROP(_idx_, __VA_ARGS__) )

#define GET_PARAM_AT_IDX(_idx_, ...) \
            GET_MULTIPLE_PARAMS_AT_IDX(_idx_, 1, __VA_ARGS__)


//------------------------------------------------------------------------------

// indirection for invoking a macro
#define HELPER_FOR_EACH_EXECUTE_MACRO(_macro_, ...)     _macro_(__VA_ARGS__)

// helper to remove the brackets from the fixes parameter list
#define HELPER_FOR_EACH_DUMMY_MACRO(...)    __VA_ARGS__

// for this macro to work, we need a few level of macros that ensure the
// parameters are resolved as expected
#define FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, ...) \
            HELPER_FOR_EACH_EXECUTE_MACRO( \
                _macro_, \
                HELPER_FOR_EACH_DUMMY_MACRO _fp_, \
                FOR_EACH_PARAM_EXTRACT(_nvp_, __VA_ARGS__) \
            )


// these functions deal with 1 to 8 groups of variable parameters
#define FOR_EACH_FP_nVP_1(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__)

#define FOR_EACH_FP_nVP_2(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_1(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))

#define FOR_EACH_FP_nVP_3(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_2(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))

#define FOR_EACH_FP_nVP_4(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_3(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))

#define FOR_EACH_FP_nVP_5(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_4(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))

#define FOR_EACH_FP_nVP_6(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_5(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))

#define FOR_EACH_FP_nVP_7(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_6(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))

#define FOR_EACH_FP_nVP_8(_macro_,_fp_, _nvp_, ...) \
            FOR_EACH_EXECUTE_MACRO_VP(_macro_, _fp_, _nvp_, __VA_ARGS__) \
            FOR_EACH_FP_nVP_7(_macro_,_fp_, _nvp_, FOR_EACH_PARAM_DROP(_nvp_, __VA_ARGS__))


// call FOR_EACH_FP_nVP_[x](...) after some level of indirection that seem to
// be necessary for macro parameter evaluation to procuce what we need.
#define HELPER_FOR_EACH_nFP_nVP_caller2(_num_, ...) \
             FOR_EACH_FP_nVP_ ## _num_(__VA_ARGS__)

// another layer of indirection that seem necessary
#define HELPER_FOR_EACH_nFP_nVP_caller(_num_, ...) \
            HELPER_FOR_EACH_nFP_nVP_caller2(_num_, __VA_ARGS__)

// this uses the macro HELPER_FOR_EACH_GET_MACRO_NUM_[n]VP() which will be
// defined below for various values of n
#define FOR_EACH_nFP_nVP(_macro_, _nfp_, _nvp_, ...) \
            HELPER_FOR_EACH_nFP_nVP_caller( \
                HELPER_FOR_EACH_GET_MACRO_NUM_## _nvp_ ## VP( \
                    FOR_EACH_PARAM_DROP(_nfp_, __VA_ARGS__) \
                ), \
                _macro_, \
                ( FOR_EACH_PARAM_EXTRACT(_nfp_, __VA_ARGS__) ), \
                _nvp_, \
                FOR_EACH_PARAM_DROP(_nfp_, __VA_ARGS__) \
            )


//------------------------------------------------------------------------------
// macros with n fixed parameters and 1 variable parameter for each iteration,
// implemented for up to 8 iterations

#define HELPER_FOR_EACH_GET_MACRO_NUM_1VP(...) \
            GET_PARAM_AT_IDX( \
                8, \
                __VA_ARGS__, \
                8,7,6,5,4,3,2,1)

//#define FOR_EACH_0FP_1VP(_macro_, ...)  FOR_EACH_nFP_nVP(_macro_, 0, 1, __VA_ARGS__)
#define FOR_EACH_1FP_1VP(_macro_, ...)  FOR_EACH_nFP_nVP(_macro_, 1, 1, __VA_ARGS__)
#define FOR_EACH_2FP_1VP(_macro_, ...)  FOR_EACH_nFP_nVP(_macro_, 2, 1, __VA_ARGS__)


//------------------------------------------------------------------------------
// macros with n fixed parameters and 2 variable parameters for each iteration
// implemented for up to 8 iterations

#define HELPER_FOR_EACH_GET_MACRO_NUM_2VP(...) \
            GET_PARAM_AT_IDX( \
                16, \
                __VA_ARGS__, \
                8,err8,7,err7,6,err6,5,err5,4,err4,3,err3,2,err2,1,err1)

//#define FOR_EACH_0FP_2VP(_macro_, ...)  FOR_EACH_nFP_nVP(_macro_, 0, 2, __VA_ARGS__)
#define FOR_EACH_1FP_2VP(_macro_, ...)  FOR_EACH_nFP_nVP(_macro_, 1, 2, __VA_ARGS__)
#define FOR_EACH_2FP_2VP(_macro_, ...)  FOR_EACH_nFP_nVP(_macro_, 2, 2, __VA_ARGS__)
