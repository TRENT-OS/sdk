/*
 *  ChanMux
 *
 *  Copyright (C) 2020, Hensoldt Cyber GmbH
 *
 */

import <if_OS_BlockingWrite.camkes>;
import <if_ChanMux.camkes>;

// ChanMux is running on top of a UART
#include "UART/Uart.camkes"

// platform specific defaults
#include "ChanMux_plat_defaults.camkes"
#include "ChanMuxHelper.camkes"


//------------------------------------------------------------------------------
// Component definitions

#define ChanMux_Component_DECLARE_BODY() \
    \
    control; \
    /*-------------------------------------------------*/ \
    /* generic upper interface */ \
    provides      ChanMuxDriverInf    ChanMuxRpc; \
    \
    /*-------------------------------------------------*/ \
    /* lower interface to underlying layer */ \
    uses          if_OS_BlockingWrite  UnderlyingChan_Rpc; \
    dataport      Buf                  UnderlyingChan_inputDataport; \
    dataport      Buf                  UnderlyingChan_outputFifoDataport; \
    consumes      EventDataAvailable   UnderlyingChan_EventHasData;


// variable arguments are a list of pairs (client_instance_name, channel_name)
// that uniquely identify a channel
#define ChanMux_DEFINE_COMPONENT(_name_, ...) \
    \
    component _name_ { \
        ChanMux_Component_DECLARE_BODY() \
        \
        /* upper interfaces */ \
        ChanMux_DECLARE_UPPER_CONNECTORS(__VA_ARGS__) \
    }


// variable arguments are a list of pairs (client_instance_name, channel_name)
// that uniquely identify a channel
#define ChanMux_DEFINE_COMPONENT_WITH_LOGGER(_name_, ...) \
    component _name_ { \
    \
        ChanMux_Component_DECLARE_BODY() \
        \
        /* upper interfaces */ \
        ChanMux_DECLARE_UPPER_CONNECTORS(__VA_ARGS__) \
        /* interface to log server */ \
        dataport  Buf           LogServer_buf; \
        uses      if_OS_Logger  LogServer_rpc; \
        attribute int           log_lvl; \
    }


//------------------------------------------------------------------------------
// Interface definitions

// ensure we define this only once if this file in included multiple times
#if !defined(ChanMux_DECLARE_AND_CONNECT_INSTANCE)

#define ChanMux_DECLARE_AND_CONNECT_INSTANCE( \
    _name_, \
    _inst_, \
    _UnderlyingChan_rpc_, \
    _UnderlyingChan_inputDataport_, \
     _UnderlyingChan_outputFifoDataport_, \
     _UnderlyingChan_data_available_) \
    \
    component   _name_          _inst_; \
    \
    connection  seL4RPCCall     _name_ ## _ ## _inst_ ## _UnderlyingChan_rpc( \
        from _inst_.UnderlyingChan_Rpc, \
        to   _UnderlyingChan_rpc_); \
    \
    connection  seL4SharedData  _name_ ## _ ## _inst_ ## _UnderlyingChan_inputDataport( \
        from _inst_.UnderlyingChan_inputDataport, \
        to   _UnderlyingChan_inputDataport_); \
    \
    connection  seL4SharedData  _name_ ## _ ## _inst_ ## _UnderlyingChan_outputFifoDataport( \
        from _UnderlyingChan_outputFifoDataport_, \
        to   _inst_.UnderlyingChan_outputFifoDataport); \
    \
    connection  seL4Notification _name_ ## _UnderlyingChan ## _inst_ ## _notification( \
        from _UnderlyingChan_data_available_, \
        to   _inst_.UnderlyingChan_EventHasData);

#endif // !defined(ChanMux_DECLARE_AND_CONNECT_INSTANCE)


#define ChanMux_DECLARE_AND_CONNECT_INSTANCE_TO_UART( \
    _name_, \
    _inst_) \
    \
    component   UART_CHANMUX   uart_ ## _name_; \
    \
    ChanMux_DECLARE_AND_CONNECT_INSTANCE( \
        _name_, \
        _inst_, \
        uart_ ## _name_.UartDrv, \
        uart_ ## _name_.Uart_inputDataport, \
        uart_ ## _name_.Uart_outputFifoDataport, \
        uart_ ## _name_.Uart_DataAvailable)


#define ChanMux_CONNECT_TO_LOGSERVER( \
    _inst_, \
    _logserver_inst_, \
    _log_server_interface_name_, \
    _log_server_dataport_name_ ) \
    \
    connection  seL4RPCCall _inst_ ## _ ## _logserver_inst_ ## _ ## _LogServer_rpc( \
        from _inst_.LogServer_rpc, \
        to   _logserver_inst_._log_server_interface_name_); \
    connection  seL4SharedData _inst_ ## _ ## _logserver_inst_ ## _ ## LogServer_buf( \
        from _inst_.LogServer_buf, \
        to   _logserver_inst_._log_server_dataport_name_);
