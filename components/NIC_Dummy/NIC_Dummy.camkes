/*
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

/*
 *  NIC-Dummy CAmkES Component
 *
 *  to be used as:
 *
 *      #include "NIC_Dummy/NIC_Dummy.camkes"
 *
 *      NIC_Dummy_COMPONENT_DEFINE(NIC_Dummy_Driver_1, 4096)
 *      NIC_Dummy_COMPONENT_DEFINE(NIC_Dummy_Driver_2, 4096)
 *
 */

#pragma once

import <if_OS_Nic.camkes>;
import <if_OS_Logger.camkes>;


//------------------------------------------------------------------------------


/*
 * Declare the NIC_Dummy with a given type name:
 *
 *      NIC_Dummy_COMPONENT_DEFINE(
 *          <name>,<bufferSize>
 *      )
 */
#define NIC_Dummy_COMPONENT_DEFINE( \
    _name_, \
    _ringbuffer_size_) \
    \
    component _name_ { \
        provides         if_OS_Nic              nic_rpc; \
        emits            EventDataAvailable     nic_event_hasData; \
        dataport         Buf(_ringbuffer_size_) nic_port_to; \
        dataport         Buf                    nic_port_from; \
        \
        maybe uses      if_OS_Logger            logServer_rpc; \
        maybe dataport  Buf                     logServer_port; \
        maybe consumes  EventReady              logServer_event_ready; \
    }


//------------------------------------------------------------------------------


/*
 * Assign all the non-client interfaces:
 *
 *      NIC_Dummy_INSTANCE_CONNECT(
 *          <instance>,
 *          <nic>.<rpc>, <nic>.<port_to>, <nic>.<port_from>, <nic>.<evt>,
 *      )
 */
#define NIC_Dummy_INSTANCE_CONNECT( \
    _inst_, \
    _nic_rpc_, \
    _nic_dp_to_, \
    _nic_dp_from_, \
    _nic_ev_) \
    \
    connection seL4NotificationNative  \
        _inst_ ## _nic_ev( \
            from    _inst_.nic_event_hasData,\
            to      _nic_ev_); \
    connection seL4RPCCall \
        _inst_ ## _nic_rpc( \
            from    _nic_rpc_, \
            to      _inst_.nic_rpc); \
    connection seL4SharedData \
        _inst_ ## _nic_dp_from ( \
            from    _inst_.nic_port_to, \
            to      _nic_dp_from_); \
    connection seL4SharedData \
        _inst_ ## _nic_dp_to( \
            from    _inst_.nic_port_from, \
            to      _nic_dp_to_);


/*
 * Assign the optional logger:
 *
 *      NIC_Dummy_INSTANCE_CONNECT_OPTIONAL_LOGGER(
 *          <instance>,
 *          <logger>.<rpc>, <logger>.<port_to>
 *      )
 */
#define NIC_Dummy_INSTANCE_CONNECT_OPTIONAL_LOGGER( \
    _inst_, \
    _log_rpc_, \
    _log_dp_) \
    \
    connection seL4RPCCall \
        _inst_ ## _log_rpc( \
            from    _inst_.logServer_rpc, \
            to      _log_rpc_); \
    connection seL4SharedData \
        _inst_ ## _log_dp( \
            from    _inst_.logServer_port, \
            to      _log_dp_);
