/* Copyright (C) 2020, HENSOLDT Cyber GmbH */

/**
 * @file
 * @brief   Driver for the Volatile Memory storage (RamDisk)
 *
 * This component acts like a disk driver (secondary storage), but in reality
 * stores the data in the volatile memory are (RAM).
 *
 * It shall be used, when relatively fast storage is needed and it is ok for the
 * data to be lost between reset cycles. Use cases for for example caching or
 * testing.
 *
 * @note    The underlying memory is volatile, so expected loss of data betwean
 *          reboots!
 *
 * @note    The size of the storage is configured with the macro
 *          RAMDISK_SIZE_BYTES, please make sure that it is defined in the main
 *          config header.
 *
 * @see @link https://en.wikipedia.org/wiki/RAM_drive @endlink
 */

/** @cond SKIP_IMPORTS */
import <if_OS_Storage.camkes>;
/** @endcond */


//------------------------------------------------------------------------------
// Component

#define DECLARE_COMPONENT_RamDisk(                      \
    _name_)                                             \
                                                        \
    component _name_ {                                  \
        provides    if_OS_Storage   storage_rpc;        \
        dataport    Buf             storage_port;       \
    }


//------------------------------------------------------------------------------
// Instance Connection

#define DECLARE_AND_CONNECT_INSTANCE_RamDisk(           \
    _name_,                                             \
    _inst_,                                             \
    _caller_rpc_,                                       \
    _caller_dp_)                                        \
                                                        \
    component   _name_  _inst_;                         \
                                                        \
    connection  seL4RPCCall                             \
        _name_ ## _ ## _inst_ ## _rpc   (               \
            from    _caller_rpc_,                       \
            to      _inst_.storage_rpc                  \
        );                                              \
    connection seL4SharedData                           \
        _name_ ## _ ## _inst_ ## _dp (                  \
            from    _caller_dp_,                        \
            to      _inst_.storage_port                 \
        );
